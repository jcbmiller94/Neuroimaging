% Script to extract to build Encoding Model
%
% J. Scimeca | jscimeca@berkeley.edu | December 2016
% For use with BCWM-fMRI project
%

mask_filename='Encode_SceneAndFaceSelective_VentralStream_combined';
load(['TrialwiseBetaArray_' mask_filename '_combined.mat']); % contains beta_array; created by JMS_EM_parameter_extraction
load('TrialwiseConditionLabels_combined'); % contains trial_labels; pre-generated by single-trial beta script
%%% Note nomenclature for condition labels:
% 1: Load4-Faces, 2: Load4-Scenes, 3: Load4-Mixed, 4: Load2-Faces, 5: Load2-Scenes


% Calculate predicted face and scene channel weights from conditon label
channel_array = zeros(2, 336); 
for trial_loop = 1:length(trial_labels)
    switch trial_labels(trial_loop)
        case 1
            channel_array(1,trial_loop) = 2.0;
        case 2
            channel_array(2,trial_loop) = 2.0;
        case 3
            channel_array(1,trial_loop) = 1.5;
            channel_array(2,trial_loop) = 1.5;
        case 4
            channel_array(1,trial_loop) = 1.0;
        case 5
            channel_array(2,trial_loop) = 1.0;
    end
end
%%% Note format of channel_array:
% First row: face channel (2 for Load4, 1.5 for Mixed, 1 for Load 2)
% Second row: scene channel (2 for Load4, 1.5 for Mixed, 1 for Load 2)


%%% Now pick the portion of the data that you want to use to build the model
beta_subset=beta_array(:,trial_labels>3);
channel_subset=channel_array(:,trial_labels>3);


% For each Load-2 trial: create a FEM, invert it, and generate reconstructed Channel Values for that trial
for trial_loop=1:length(channel_subset)
    
    % for each trial, build a vector to seperate that trial
    trial_index=zeros(1,length(channel_subset));
    trial_index(trial_loop)=1;
    
    % pull the beta vector for this trial (to be used with inverted model)
    beta_subset_1trial=beta_subset(:,trial_index==1);
    
    % filter out this trial's vector from the rest of the beta vectors (to be used with forward model)
    beta_subset_AllOther=beta_subset(:,trial_index==0);
    channel_subset_AllOther=channel_subset(:,trial_index==0);
       
    %%% Forward Model: Fit OLS regression long-hand to find estimated weights
    estimated_weights=beta_subset_AllOther*transpose(channel_subset_AllOther)*((channel_subset_AllOther*transpose(channel_subset_AllOther))^(-1));

    %%% Invert model and generate channel values (for single left-out trial)
    channel_values=((transpose(estimated_weights)*estimated_weights)^(-1))*transpose(estimated_weights)*beta_subset_1trial;
    
    %%% Save each trial's channel value output to a results array
    channel_results(:,trial_loop)=channel_values; 
    
    %%% Clear some variables for safety
    clear channel_values estimated_weights channel_subset_AllOther beta_subset_AllOther beta_subset_1trial
end


%%% Can add code to save the reconstructed channel values into a particular file



